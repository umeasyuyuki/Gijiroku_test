{"ast":null,"code":"export const createBlobEventFactory = nativeBlobEventConstructor => {\n  return (type, blobEventInit) => {\n    // Bug #14: Safari does not yet support the BlobEvent.\n    if (nativeBlobEventConstructor === null) {\n      const {\n        data,\n        ...eventInit\n      } = blobEventInit;\n      const fakeBlobEvent = new Event(type, eventInit);\n      fakeBlobEvent.data = data;\n      return fakeBlobEvent;\n    }\n    return new nativeBlobEventConstructor(type, blobEventInit);\n  };\n};","map":{"version":3,"names":["createBlobEventFactory","nativeBlobEventConstructor","type","blobEventInit","data","eventInit","fakeBlobEvent","Event"],"sources":["/Users/asyuyukiume/AI学習/議事録　テスト/fronttest/node_modules/extendable-media-recorder/src/factories/blob-event-factory.ts"],"sourcesContent":["import { IBlobEvent } from '../interfaces';\nimport { TBlobEventFactoryFactory } from '../types';\n\nexport const createBlobEventFactory: TBlobEventFactoryFactory = (nativeBlobEventConstructor) => {\n    return (type, blobEventInit) => {\n        // Bug #14: Safari does not yet support the BlobEvent.\n        if (nativeBlobEventConstructor === null) {\n            const { data, ...eventInit } = blobEventInit;\n            const fakeBlobEvent = <IBlobEvent>new Event(type, eventInit);\n\n            (<Omit<IBlobEvent, 'data'> & { -readonly [P in 'data']: IBlobEvent[P] }>fakeBlobEvent).data = data;\n\n            return fakeBlobEvent;\n        }\n\n        return new nativeBlobEventConstructor(type, blobEventInit);\n    };\n};\n"],"mappings":"AAGA,OAAO,MAAMA,sBAAsB,GAA8BC,0BAA0B,IAAI;EAC3F,OAAO,CAACC,IAAI,EAAEC,aAAa,KAAI;IAC3B;IACA,IAAIF,0BAA0B,KAAK,IAAI,EAAE;MACrC,MAAM;QAAEG,IAAI;QAAE,GAAGC;MAAS,CAAE,GAAGF,aAAa;MAC5C,MAAMG,aAAa,GAAe,IAAIC,KAAK,CAACL,IAAI,EAAEG,SAAS,CAAC;MAEYC,aAAc,CAACF,IAAI,GAAGA,IAAI;MAElG,OAAOE,aAAa;;IAGxB,OAAO,IAAIL,0BAA0B,CAACC,IAAI,EAAEC,aAAa,CAAC;EAC9D,CAAC;AACL,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}