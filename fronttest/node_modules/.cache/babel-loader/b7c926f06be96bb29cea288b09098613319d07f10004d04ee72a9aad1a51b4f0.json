{"ast":null,"code":"export const createWakeLock = (emitNotSupportedError, window, wrapSubscribeFunction) => {\n  return type => wrapSubscribeFunction(observer => {\n    if (window === null || window.navigator === undefined || window.navigator.wakeLock === undefined) {\n      return emitNotSupportedError(observer);\n    }\n    const releaseWakeLock = wakeLockSentinel => wakeLockSentinel.release().catch(() => {\n      // Ignore errors.\n    });\n    const removeReleaseEventListener = wakeLockSentinel => {\n      wakeLockSentinel.onrelease = null;\n    };\n    let isActive = true;\n    const unsubscribeWhileRequesting = () => {\n      isActive = false;\n    };\n    let unsubscribe = unsubscribeWhileRequesting;\n    const requestWakeLock = () => window.navigator.wakeLock.request(type).then(wakeLockSentinel => {\n      if (isActive) {\n        observer.next(true);\n      }\n      if (isActive) {\n        wakeLockSentinel.onrelease = () => {\n          observer.next(false);\n          unsubscribe = unsubscribeWhileRequesting;\n          removeReleaseEventListener(wakeLockSentinel);\n          requestWakeLock();\n        };\n        unsubscribe = () => {\n          removeReleaseEventListener(wakeLockSentinel);\n          releaseWakeLock(wakeLockSentinel);\n        };\n      } else {\n        releaseWakeLock(wakeLockSentinel);\n      }\n    }, err => {\n      if (isActive) {\n        observer.error(err);\n      }\n    });\n    requestWakeLock();\n    return () => unsubscribe();\n  });\n};","map":{"version":3,"names":["createWakeLock","emitNotSupportedError","window","wrapSubscribeFunction","type","observer","navigator","undefined","wakeLock","releaseWakeLock","wakeLockSentinel","release","catch","removeReleaseEventListener","onrelease","isActive","unsubscribeWhileRequesting","unsubscribe","requestWakeLock","request","then","next","err","error"],"sources":["/Users/asyuyukiume/AI学習/議事録　テスト/fronttest/node_modules/subscribable-things/src/factories/wake-lock.ts"],"sourcesContent":["import { IWakeLockSentinel } from '../interfaces';\nimport { TWakeLockFactory } from '../types';\n\nexport const createWakeLock: TWakeLockFactory = (emitNotSupportedError, window, wrapSubscribeFunction) => {\n    return (type) =>\n        wrapSubscribeFunction((observer) => {\n            if (window === null || window.navigator === undefined || window.navigator.wakeLock === undefined) {\n                return emitNotSupportedError(observer);\n            }\n\n            const releaseWakeLock = (wakeLockSentinel: IWakeLockSentinel) =>\n                wakeLockSentinel.release().catch(() => {\n                    // Ignore errors.\n                });\n            const removeReleaseEventListener = (wakeLockSentinel: IWakeLockSentinel) => {\n                wakeLockSentinel.onrelease = null;\n            };\n\n            let isActive = true;\n\n            const unsubscribeWhileRequesting = () => {\n                isActive = false;\n            };\n\n            let unsubscribe = unsubscribeWhileRequesting;\n\n            const requestWakeLock = () =>\n                window.navigator.wakeLock.request(type).then(\n                    (wakeLockSentinel) => {\n                        if (isActive) {\n                            observer.next(true);\n                        }\n\n                        if (isActive) {\n                            wakeLockSentinel.onrelease = () => {\n                                observer.next(false);\n\n                                unsubscribe = unsubscribeWhileRequesting;\n\n                                removeReleaseEventListener(wakeLockSentinel);\n                                requestWakeLock();\n                            };\n\n                            unsubscribe = () => {\n                                removeReleaseEventListener(wakeLockSentinel);\n                                releaseWakeLock(wakeLockSentinel);\n                            };\n                        } else {\n                            releaseWakeLock(wakeLockSentinel);\n                        }\n                    },\n                    (err) => {\n                        if (isActive) {\n                            observer.error(err);\n                        }\n                    }\n                );\n\n            requestWakeLock();\n\n            return () => unsubscribe();\n        });\n};\n"],"mappings":"AAGA,OAAO,MAAMA,cAAc,GAAqBA,CAACC,qBAAqB,EAAEC,MAAM,EAAEC,qBAAqB,KAAI;EACrG,OAAQC,IAAI,IACRD,qBAAqB,CAAEE,QAAQ,IAAI;IAC/B,IAAIH,MAAM,KAAK,IAAI,IAAIA,MAAM,CAACI,SAAS,KAAKC,SAAS,IAAIL,MAAM,CAACI,SAAS,CAACE,QAAQ,KAAKD,SAAS,EAAE;MAC9F,OAAON,qBAAqB,CAACI,QAAQ,CAAC;IAC1C;IAEA,MAAMI,eAAe,GAAIC,gBAAmC,IACxDA,gBAAgB,CAACC,OAAO,EAAE,CAACC,KAAK,CAAC,MAAK;MAClC;IAAA,CACH,CAAC;IACN,MAAMC,0BAA0B,GAAIH,gBAAmC,IAAI;MACvEA,gBAAgB,CAACI,SAAS,GAAG,IAAI;IACrC,CAAC;IAED,IAAIC,QAAQ,GAAG,IAAI;IAEnB,MAAMC,0BAA0B,GAAGA,CAAA,KAAK;MACpCD,QAAQ,GAAG,KAAK;IACpB,CAAC;IAED,IAAIE,WAAW,GAAGD,0BAA0B;IAE5C,MAAME,eAAe,GAAGA,CAAA,KACpBhB,MAAM,CAACI,SAAS,CAACE,QAAQ,CAACW,OAAO,CAACf,IAAI,CAAC,CAACgB,IAAI,CACvCV,gBAAgB,IAAI;MACjB,IAAIK,QAAQ,EAAE;QACVV,QAAQ,CAACgB,IAAI,CAAC,IAAI,CAAC;MACvB;MAEA,IAAIN,QAAQ,EAAE;QACVL,gBAAgB,CAACI,SAAS,GAAG,MAAK;UAC9BT,QAAQ,CAACgB,IAAI,CAAC,KAAK,CAAC;UAEpBJ,WAAW,GAAGD,0BAA0B;UAExCH,0BAA0B,CAACH,gBAAgB,CAAC;UAC5CQ,eAAe,EAAE;QACrB,CAAC;QAEDD,WAAW,GAAGA,CAAA,KAAK;UACfJ,0BAA0B,CAACH,gBAAgB,CAAC;UAC5CD,eAAe,CAACC,gBAAgB,CAAC;QACrC,CAAC;MACL,CAAC,MAAM;QACHD,eAAe,CAACC,gBAAgB,CAAC;MACrC;IACJ,CAAC,EACAY,GAAG,IAAI;MACJ,IAAIP,QAAQ,EAAE;QACVV,QAAQ,CAACkB,KAAK,CAACD,GAAG,CAAC;MACvB;IACJ,CAAC,CACJ;IAELJ,eAAe,EAAE;IAEjB,OAAO,MAAMD,WAAW,EAAE;EAC9B,CAAC,CAAC;AACV,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}