{"ast":null,"code":"export {};","map":{"version":3,"names":[],"sources":["/Users/asyuyukiume/AI学習/議事録　テスト/fronttest/node_modules/subscribable-things/src/interfaces/midi-output.ts"],"sourcesContent":["import { TMidiConnectionEventHandler } from '../types';\nimport { IMidiOutputEventMap } from './midi-output-event-map';\nimport { IMidiPort } from './midi-port';\n\n// @todo TypeScript does not include type definitions for the Web MIDI API yet.\nexport interface IMidiOutput extends IMidiPort {\n    onstatechange: null | TMidiConnectionEventHandler<this>;\n\n    readonly type: 'output';\n\n    addEventListener<K extends keyof IMidiOutputEventMap<this>>(\n        type: K,\n        listener: (this: this, event: IMidiOutputEventMap<this>[K]) => void,\n        options?: boolean | AddEventListenerOptions\n    ): void;\n\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;\n\n    clear(): void;\n\n    removeEventListener<K extends keyof IMidiOutputEventMap<this>>(\n        type: K,\n        listener: (this: this, event: IMidiOutputEventMap<this>[K]) => void,\n        options?: boolean | EventListenerOptions\n    ): void;\n\n    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;\n\n    send(data: number[] | Uint8Array, timestamp?: number): void;\n}\n"],"mappings":"","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}