{"ast":null,"code":"import { renderMethodNotFoundError, renderMissingResponseError, renderUnexpectedResultError } from './error-renderers';\nexport const createMessageHandler = (receiver, workerImplementation) => {\n  return async ({\n    data: {\n      id,\n      method,\n      params\n    }\n  }) => {\n    const messageHandler = workerImplementation[method];\n    try {\n      if (messageHandler === undefined) {\n        throw renderMethodNotFoundError({\n          method\n        });\n      }\n      const response = params === undefined ? messageHandler() : messageHandler(params);\n      if (response === undefined) {\n        throw renderMissingResponseError({\n          method\n        });\n      }\n      const synchronousResponse = response instanceof Promise ? await response : response;\n      if (id === null) {\n        if (synchronousResponse.result !== undefined) {\n          throw renderUnexpectedResultError({\n            method\n          });\n        }\n      } else {\n        if (synchronousResponse.result === undefined) {\n          throw renderUnexpectedResultError({\n            method\n          });\n        }\n        const {\n          result,\n          transferables = []\n        } = synchronousResponse;\n        receiver.postMessage({\n          id,\n          result\n        }, transferables);\n      }\n    } catch (err) {\n      const {\n        message,\n        status = -32603\n      } = err;\n      receiver.postMessage({\n        error: {\n          code: status,\n          message\n        },\n        id\n      });\n    }\n  };\n};","map":{"version":3,"names":["renderMethodNotFoundError","renderMissingResponseError","renderUnexpectedResultError","createMessageHandler","receiver","workerImplementation","data","id","method","params","messageHandler","undefined","response","synchronousResponse","Promise","result","transferables","postMessage","err","message","status","error","code"],"sources":["/Users/asyuyukiume/AI学習/議事録　テスト/fronttest/node_modules/recorder-audio-worklet/node_modules/worker-factory/src/helpers/create-message-handler.ts"],"sourcesContent":["import { IAugmentedError } from 'compilerr';\nimport { IBrokerEvent, IErrorNotification, IErrorResponse, IReceiver, IRequest, IWorkerDefinition } from '../interfaces';\nimport { TMessageReceiverWithParams, TMessageReceiverWithoutParams, TWorkerImplementation } from '../types';\nimport { renderMethodNotFoundError, renderMissingResponseError, renderUnexpectedResultError } from './error-renderers';\n\nexport const createMessageHandler = <T extends IWorkerDefinition>(receiver: IReceiver, workerImplementation: TWorkerImplementation<T>) => {\n    return async ({ data: { id, method, params } }: IBrokerEvent<T>) => {\n        const messageHandler = workerImplementation[method];\n\n        try {\n            if (messageHandler === undefined) {\n                throw renderMethodNotFoundError({ method });\n            }\n\n            const response =\n                params === undefined\n                    ? (messageHandler as TMessageReceiverWithoutParams<T[typeof method]['response']>)()\n                    : (messageHandler as TMessageReceiverWithParams<T[typeof method]['params'], T[typeof method]['response']>)(params);\n\n            if (response === undefined) {\n                throw renderMissingResponseError({ method });\n            }\n\n            const synchronousResponse = response instanceof Promise ? await response : response;\n\n            if (id === null) {\n                if (synchronousResponse.result !== undefined) {\n                    throw renderUnexpectedResultError({ method });\n                }\n            } else {\n                if (synchronousResponse.result === undefined) {\n                    throw renderUnexpectedResultError({ method });\n                }\n\n                const { result, transferables = [] } = <IRequest['response']>synchronousResponse;\n\n                receiver.postMessage({ id, result }, transferables);\n            }\n        } catch (err) {\n            const { message, status = -32603 } = <IAugmentedError>err;\n\n            receiver.postMessage(<IErrorNotification | IErrorResponse>{ error: { code: status, message }, id });\n        }\n    };\n};\n"],"mappings":"AAGA,SAASA,yBAAyB,EAAEC,0BAA0B,EAAEC,2BAA2B,QAAQ,mBAAmB;AAEtH,OAAO,MAAMC,oBAAoB,GAAGA,CAA8BC,QAAmB,EAAEC,oBAA8C,KAAI;EACrI,OAAO,OAAO;IAAEC,IAAI,EAAE;MAAEC,EAAE;MAAEC,MAAM;MAAEC;IAAM;EAAE,CAAmB,KAAI;IAC/D,MAAMC,cAAc,GAAGL,oBAAoB,CAACG,MAAM,CAAC;IAEnD,IAAI;MACA,IAAIE,cAAc,KAAKC,SAAS,EAAE;QAC9B,MAAMX,yBAAyB,CAAC;UAAEQ;QAAM,CAAE,CAAC;;MAG/C,MAAMI,QAAQ,GACVH,MAAM,KAAKE,SAAS,GACbD,cAA8E,EAAE,GAChFA,cAAuG,CAACD,MAAM,CAAC;MAE1H,IAAIG,QAAQ,KAAKD,SAAS,EAAE;QACxB,MAAMV,0BAA0B,CAAC;UAAEO;QAAM,CAAE,CAAC;;MAGhD,MAAMK,mBAAmB,GAAGD,QAAQ,YAAYE,OAAO,GAAG,MAAMF,QAAQ,GAAGA,QAAQ;MAEnF,IAAIL,EAAE,KAAK,IAAI,EAAE;QACb,IAAIM,mBAAmB,CAACE,MAAM,KAAKJ,SAAS,EAAE;UAC1C,MAAMT,2BAA2B,CAAC;YAAEM;UAAM,CAAE,CAAC;;OAEpD,MAAM;QACH,IAAIK,mBAAmB,CAACE,MAAM,KAAKJ,SAAS,EAAE;UAC1C,MAAMT,2BAA2B,CAAC;YAAEM;UAAM,CAAE,CAAC;;QAGjD,MAAM;UAAEO,MAAM;UAAEC,aAAa,GAAG;QAAE,CAAE,GAAyBH,mBAAmB;QAEhFT,QAAQ,CAACa,WAAW,CAAC;UAAEV,EAAE;UAAEQ;QAAM,CAAE,EAAEC,aAAa,CAAC;;KAE1D,CAAC,OAAOE,GAAG,EAAE;MACV,MAAM;QAAEC,OAAO;QAAEC,MAAM,GAAG,CAAC;MAAK,CAAE,GAAoBF,GAAG;MAEzDd,QAAQ,CAACa,WAAW,CAAsC;QAAEI,KAAK,EAAE;UAAEC,IAAI,EAAEF,MAAM;UAAED;QAAO,CAAE;QAAEZ;MAAE,CAAE,CAAC;;EAE3G,CAAC;AACL,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}